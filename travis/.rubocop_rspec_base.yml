# This file contains defaults for RSpec projects. Individual projects
# can customize by inheriting this file and overriding particular settings.

AccessModifierIndentation:
  EnforcedStyle: outdent

# "Use alias_method instead of alias"
# We're fine with `alias`.
Alias:
  Enabled: false

AlignParameters:
  EnforcedStyle: with_first_parameter

# "Avoid the use of the case equality operator ==="
# We prefer using `Class#===` over `Object#is_a?` because `Class#===`
# is less likely to be monkey patched than `is_a?` on a user object.
CaseEquality:
  Enabled: false

# Warns when the class is excessively long.
ClassLength:
  Max: 100

CollectionMethods:
  PreferredMethods:
    reduce: 'inject'

# Over time we'd like to get this down, but this is what we're at now.
CyclomaticComplexity:
  Max: 10

# We use YARD to enforce documentation. It works better than rubocop's
# enforcement...rubocop complains about the places we re-open
# `RSpec::Expectations` and `RSpec::Matchers` w/o having doc commments.
Documentation:
  Enabled: false

# We still support 1.8.7 which requires trailing dots
DotPosition:
  EnforcedStyle: trailing

DoubleNegation:
  Enabled: false

# each_with_object is unavailable on 1.8.7 so we have to disable this one.
EachWithObject:
  Enabled: false

Encoding:
  EnforcedStyle: when_needed

FormatString:
  EnforcedStyle: percent

# As long as we support ruby 1.8.7 we have to use hash rockets.
HashSyntax:
  EnforcedStyle: hash_rockets

# We can't use the new lambda syntax, since we still support 1.8.7.
Lambda:
  Enabled: false

# Over time we'd like to get this down, but this is what we're at now.
LineLength:
  Max: 100

# Over time we'd like to get this down, but this is what we're at now.
MethodLength:
  Max: 15

# Who cares what we call the argument for binary operator methods?
OpMethod:
  Enabled: false

PercentLiteralDelimiters:
  PreferredDelimiters:
    '%':  ()      # double-quoted string
    '%i': '[]'    # array of symbols
    '%q': ()      # single-quoted string
    '%Q': ()      # double-quoted string
    '%r': '{}'    # regular expression pattern
    '%s': ()      # a symbol
    '%w': '[]'    # array of single-quoted strings
    '%W': '[]'    # array of double-quoted strings
    '%x': ()      # a shell command as a string

# We have too many special cases where we allow generator methods or prefer a
# prefixed predicate due to it's improved readability.
PredicateName:
  Enabled: false

# On 1.8 `proc` is `lambda`, so we use `Proc.new` to ensure we get real procs on all supported versions.
# http://batsov.com/articles/2014/02/04/the-elements-of-style-in-ruby-number-12-proc-vs-proc-dot-new/
Proc:
  Enabled: false

RedundantReturn:
  AllowMultipleReturnValues: true

# Exceptions should be rescued with `Support::AllExceptionsExceptOnesWeMustNotRescue`
RescueException:
  Enabled: true

# We haven't adopted the `fail` to signal exceptions vs `raise` for re-raises convention.
SignalException:
  Enabled: false

# We've tended to use no space, so it's less of a change to stick with that.
SpaceAroundEqualsInParameterDefault:
  EnforcedStyle: no_space

# We don't care about single vs double qoutes.
StringLiterals:
  Enabled: false

# This is problematic for Cucumber
Lint/AmbiguousRegexpLiteral:
  Exclude:
    - features/**/*

# In this context, eval is not a "security risk"
Lint/Eval:
  Enabled: false

Lint/HandleExceptions:
  Exclude:
    - spec/**/*

# RSpec does lots of crazy metaprogramming
# Defining methods in methods is what we do
Lint/NestedMethodDefinition:
  Enabled: false

Lint/RescueException:
  Exclude:
    - spec/**/*

Lint/ShadowingOuterLocalVariable:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

Metrics/ModuleLength:
  Enabled: false

Metrics/PerceivedComplexity:
  Enabled: false

Style/AlignParameters:
  Enabled: false

Style/BlockComments:
  Exclude:
    - benchmarks/**/*

# RSpec examples use expect { ... } rather than expect do ... end
Style/Blocks:
  Exclude:
    - spec/**/*

# In tests, it is convenient to define a test class like RSpec::Something on a single line
Style/ClassAndModuleChildren:
  Exclude:
    - spec/**/*

# We sometimes use #kind_of? rather than #is_a?
Style/ClassCheck:
  Enabled: false

# Our tests use compact class definitions to save "real estate" on the screen.
Style/EmptyLineBetweenDefs:
  Exclude:
    - spec/**/*

Style/EmptyLinesAroundAccessModifier:
  Exclude:
    - spec/**/*

Style/ExtraSpacing:
  Enabled: false

Style/FirstParameterIndentation:
  Enabled: false

Style/GlobalVars:
  Exclude:
    - spec/**/*
    - benchmarks/**/*

Style/GuardClause:
  Enabled: false

# Allow use of: expect { ... }.to raise_error(e) { ... }
Style/MultilineBlockChain:
  Exclude:
    - spec/**/*

Style/MultilineOperationIndentation:
  Enabled: false

Style/ParallelAssignment:
  Enabled: false

# Allow use of: something rescue nil
Style/RescueModifier:
  Exclude:
    - spec/**/*

# Our tests use single-line methods in numerous places. This saves "real estate" on the screen.
Style/Semicolon:
  Exclude:
    - spec/**/*
    - benchmarks/**/*

Style/SingleLineMethods:
  Exclude:
    - spec/**/*

Style/SingleSpaceBeforeFirstArg:
  Enabled: false

Style/SpaceAroundOperators:
  Enabled: false

# Allow 'class Something < Struct.new(:a, :b)'
Style/StructInheritance:
  Enabled: false

# Allow 'obj.method { |o| o.something }' rather than 'obj.method(&:something)'
Style/SymbolProc:
  Enabled: false

# Allow use of 'something rescue nil' in specs only
Style/RescueModifier:
  Enabled: false

# We name block parameters what we want
Style/SingleLineBlockParams:
  Enabled: false

# RSpec uses {:a => 1} rather than { :a => 1 }
Style/SpaceInsideHashLiteralBraces:
  Enabled: false

# This rule favors constant names from the English standard library which we don't load.
Style/SpecialGlobalVars:
  Enabled: false

Style/MultilineTernaryOperator:
  Enabled: false

Style/TrailingComma:
  Enabled: false

TrivialAccessors:
  AllowDSLWriters: true
  AllowPredicates: true
  ExactNameMatch: true
